// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Not(in=zx,out=nzx);
    Not(in=zy,out=nzy);

//completes the zx computation
    And(a=x[0],b=nzx,out=xz0);
    And(a=x[1],b=nzx,out=xz1);
    And(a=x[2],b=nzx,out=xz2);
    And(a=x[3],b=nzx,out=xz3);
    And(a=x[4],b=nzx,out=xz4);
    And(a=x[5],b=nzx,out=xz5);
    And(a=x[6],b=nzx,out=xz6);
    And(a=x[7],b=nzx,out=xz7);
    And(a=x[8],b=nzx,out=xz8);
    And(a=x[9],b=nzx,out=xz9);
    And(a=x[10],b=nzx,out=xz10);
    And(a=x[11],b=nzx,out=xz11);
    And(a=x[12],b=nzx,out=xz12);
    And(a=x[13],b=nzx,out=xz13);
    And(a=x[14],b=nzx,out=xz14);
    And(a=x[15],b=nzx,out=xz15);

//completes the nx computation

    Not(in=xz0,out=nxz0);
    Not(in=xz1,out=nxz1);
    Not(in=xz2,out=nxz2);
    Not(in=xz3,out=nxz3);
    Not(in=xz4,out=nxz4);
    Not(in=xz5,out=nxz5);
    Not(in=xz6,out=nxz6);
    Not(in=xz7,out=nxz7);
    Not(in=xz8,out=nxz8);
    Not(in=xz9,out=nxz9);
    Not(in=xz10,out=nxz10);
    Not(in=xz11,out=nxz11);
    Not(in=xz12,out=nxz12);
    Not(in=xz13,out=nxz13);
    Not(in=xz14,out=nxz14);
    Not(in=xz15,out=nxz15);

    Mux(a=xz0,b=nxz0,sel=nx,out=xnx0);
    Mux(a=xz1,b=nxz1,sel=nx,out=xnx1);
    Mux(a=xz2,b=nxz2,sel=nx,out=xnx2);
    Mux(a=xz3,b=nxz3,sel=nx,out=xnx3);
    Mux(a=xz4,b=nxz4,sel=nx,out=xnx4);
    Mux(a=xz5,b=nxz5,sel=nx,out=xnx5);
    Mux(a=xz6,b=nxz6,sel=nx,out=xnx6);
    Mux(a=xz7,b=nxz7,sel=nx,out=xnx7);
    Mux(a=xz8,b=nxz8,sel=nx,out=xnx8);
    Mux(a=xz9,b=nxz9,sel=nx,out=xnx9);
    Mux(a=xz10,b=nxz10,sel=nx,out=xnx10);
    Mux(a=xz11,b=nxz11,sel=nx,out=xnx11);
    Mux(a=xz12,b=nxz12,sel=nx,out=xnx12);
    Mux(a=xz13,b=nxz13,sel=nx,out=xnx13);
    Mux(a=xz14,b=nxz14,sel=nx,out=xnx14);
    Mux(a=xz15,b=nxz15,sel=nx,out=xnx15);



//completes the zy computation
    And(a=y[0],b=nzy,out=yz0);
    And(a=y[1],b=nzy,out=yz1);
    And(a=y[2],b=nzy,out=yz2);
    And(a=y[3],b=nzy,out=yz3);
    And(a=y[4],b=nzy,out=yz4);
    And(a=y[5],b=nzy,out=yz5);
    And(a=y[6],b=nzy,out=yz6);
    And(a=y[7],b=nzy,out=yz7);
    And(a=y[8],b=nzy,out=yz8);
    And(a=y[9],b=nzy,out=yz9);
    And(a=y[10],b=nzy,out=yz10);
    And(a=y[11],b=nzy,out=yz11);
    And(a=y[12],b=nzy,out=yz12);
    And(a=y[13],b=nzy,out=yz13);
    And(a=y[14],b=nzy,out=yz14);
    And(a=y[15],b=nzy,out=yz15);

//completes the ny computation

    Not(in=yz0,out=nyz0);
    Not(in=yz1,out=nyz1);
    Not(in=yz2,out=nyz2);
    Not(in=yz3,out=nyz3);
    Not(in=yz4,out=nyz4);
    Not(in=yz5,out=nyz5);
    Not(in=yz6,out=nyz6);
    Not(in=yz7,out=nyz7);
    Not(in=yz8,out=nyz8);
    Not(in=yz9,out=nyz9);
    Not(in=yz10,out=nyz10);
    Not(in=yz11,out=nyz11);
    Not(in=yz12,out=nyz12);
    Not(in=yz13,out=nyz13);
    Not(in=yz14,out=nyz14);
    Not(in=yz15,out=nyz15);

    Mux(a=yz0,b=nyz0,sel=ny,out=yny0);
    Mux(a=yz1,b=nyz1,sel=ny,out=yny1);
    Mux(a=yz2,b=nyz2,sel=ny,out=yny2);
    Mux(a=yz3,b=nyz3,sel=ny,out=yny3);
    Mux(a=yz4,b=nyz4,sel=ny,out=yny4);
    Mux(a=yz5,b=nyz5,sel=ny,out=yny5);
    Mux(a=yz6,b=nyz6,sel=ny,out=yny6);
    Mux(a=yz7,b=nyz7,sel=ny,out=yny7);
    Mux(a=yz8,b=nyz8,sel=ny,out=yny8);
    Mux(a=yz9,b=nyz9,sel=ny,out=yny9);
    Mux(a=yz10,b=nyz10,sel=ny,out=yny10);
    Mux(a=yz11,b=nyz11,sel=ny,out=yny11);
    Mux(a=yz12,b=nyz12,sel=ny,out=yny12);
    Mux(a=yz13,b=nyz13,sel=ny,out=yny13);
    Mux(a=yz14,b=nyz14,sel=ny,out=yny14);
    Mux(a=yz15,b=nyz15,sel=ny,out=yny15);



//completes the +/& computation

    HalfAdder(a=xnx0,b=yny0,sum=xyadd0,carry=xycar0);
    FullAdder(a=xnx1,b=yny1,c=xycar0,sum=xyadd1,carry=xycar1);
    FullAdder(a=xnx2,b=yny2,c=xycar1,sum=xyadd2,carry=xycar2);
    FullAdder(a=xnx3,b=yny3,c=xycar2,sum=xyadd3,carry=xycar3);
    FullAdder(a=xnx4,b=yny4,c=xycar3,sum=xyadd4,carry=xycar4);
    FullAdder(a=xnx5,b=yny5,c=xycar4,sum=xyadd5,carry=xycar5);
    FullAdder(a=xnx6,b=yny6,c=xycar5,sum=xyadd6,carry=xycar6);
    FullAdder(a=xnx7,b=yny7,c=xycar6,sum=xyadd7,carry=xycar7);
    FullAdder(a=xnx8,b=yny8,c=xycar7,sum=xyadd8,carry=xycar8);
    FullAdder(a=xnx9,b=yny9,c=xycar8,sum=xyadd9,carry=xycar9);
    FullAdder(a=xnx10,b=yny10,c=xycar9,sum=xyadd10,carry=xycar10);
    FullAdder(a=xnx11,b=yny11,c=xycar10,sum=xyadd11,carry=xycar11);
    FullAdder(a=xnx12,b=yny12,c=xycar11,sum=xyadd12,carry=xycar12);
    FullAdder(a=xnx13,b=yny13,c=xycar12,sum=xyadd13,carry=xycar13);
    FullAdder(a=xnx14,b=yny14,c=xycar13,sum=xyadd14,carry=xycar14);
    FullAdder(a=xnx15,b=yny15,c=xycar14,sum=xyadd15,carry=xycar15);

    And(a=xnx0,b=yny0,out=xyand0);
    And(a=xnx1,b=yny1,out=xyand1);
    And(a=xnx2,b=yny2,out=xyand2);
    And(a=xnx3,b=yny3,out=xyand3);
    And(a=xnx4,b=yny4,out=xyand4);
    And(a=xnx5,b=yny5,out=xyand5);
    And(a=xnx6,b=yny6,out=xyand6);
    And(a=xnx7,b=yny7,out=xyand7);
    And(a=xnx8,b=yny8,out=xyand8);
    And(a=xnx9,b=yny9,out=xyand9);
    And(a=xnx10,b=yny10,out=xyand10);
    And(a=xnx11,b=yny11,out=xyand11);
    And(a=xnx12,b=yny12,out=xyand12);
    And(a=xnx13,b=yny13,out=xyand13);
    And(a=xnx14,b=yny14,out=xyand14);
    And(a=xnx15,b=yny15,out=xyand15);

    Mux(a=xyand0,b=xyadd0,sel=f,out=xyaa0);
    Mux(a=xyand1,b=xyadd1,sel=f,out=xyaa1);
    Mux(a=xyand2,b=xyadd2,sel=f,out=xyaa2);
    Mux(a=xyand3,b=xyadd3,sel=f,out=xyaa3);
    Mux(a=xyand4,b=xyadd4,sel=f,out=xyaa4);
    Mux(a=xyand5,b=xyadd5,sel=f,out=xyaa5);
    Mux(a=xyand6,b=xyadd6,sel=f,out=xyaa6);
    Mux(a=xyand7,b=xyadd7,sel=f,out=xyaa7);
    Mux(a=xyand8,b=xyadd8,sel=f,out=xyaa8);
    Mux(a=xyand9,b=xyadd9,sel=f,out=xyaa9);
    Mux(a=xyand10,b=xyadd10,sel=f,out=xyaa10);
    Mux(a=xyand11,b=xyadd11,sel=f,out=xyaa11);
    Mux(a=xyand12,b=xyadd12,sel=f,out=xyaa12);
    Mux(a=xyand13,b=xyadd13,sel=f,out=xyaa13);
    Mux(a=xyand14,b=xyadd14,sel=f,out=xyaa14);
    Mux(a=xyand15,b=xyadd15,sel=f,out=xyaa15);



//completes the inverted output computation

    Not(in=xyaa0,out=nxyaa0);
    Not(in=xyaa1,out=nxyaa1);
    Not(in=xyaa2,out=nxyaa2);
    Not(in=xyaa3,out=nxyaa3);
    Not(in=xyaa4,out=nxyaa4);
    Not(in=xyaa5,out=nxyaa5);
    Not(in=xyaa6,out=nxyaa6);
    Not(in=xyaa7,out=nxyaa7);
    Not(in=xyaa8,out=nxyaa8);
    Not(in=xyaa9,out=nxyaa9);
    Not(in=xyaa10,out=nxyaa10);
    Not(in=xyaa11,out=nxyaa11);
    Not(in=xyaa12,out=nxyaa12);
    Not(in=xyaa13,out=nxyaa13);
    Not(in=xyaa14,out=nxyaa14);
    Not(in=xyaa15,out=nxyaa15);

    Mux(a=xyaa0,b=nxyaa0,sel=no,out=out[0]);
    Mux(a=xyaa1,b=nxyaa1,sel=no,out=out[1]);
    Mux(a=xyaa2,b=nxyaa2,sel=no,out=out[2]);
    Mux(a=xyaa3,b=nxyaa3,sel=no,out=out[3]);
    Mux(a=xyaa4,b=nxyaa4,sel=no,out=out[4]);
    Mux(a=xyaa5,b=nxyaa5,sel=no,out=out[5]);
    Mux(a=xyaa6,b=nxyaa6,sel=no,out=out[6]);
    Mux(a=xyaa7,b=nxyaa7,sel=no,out=out[7]);
    Mux(a=xyaa8,b=nxyaa8,sel=no,out=out[8]);
    Mux(a=xyaa9,b=nxyaa9,sel=no,out=out[9]);
    Mux(a=xyaa10,b=nxyaa10,sel=no,out=out[10]);
    Mux(a=xyaa11,b=nxyaa11,sel=no,out=out[11]);
    Mux(a=xyaa12,b=nxyaa12,sel=no,out=out[12]);
    Mux(a=xyaa13,b=nxyaa13,sel=no,out=out[13]);
    Mux(a=xyaa14,b=nxyaa14,sel=no,out=out[14]);
    Mux(a=xyaa15,b=nxyaa15,sel=no,out=out[15]);

//sets the zr flag

    Mux(a=xyaa0,b=nxyaa0,sel=no,out=oute0);
    Mux(a=xyaa1,b=nxyaa1,sel=no,out=oute1);
    Mux(a=xyaa2,b=nxyaa2,sel=no,out=oute2);
    Mux(a=xyaa3,b=nxyaa3,sel=no,out=oute3);
    Mux(a=xyaa4,b=nxyaa4,sel=no,out=oute4);
    Mux(a=xyaa5,b=nxyaa5,sel=no,out=oute5);
    Mux(a=xyaa6,b=nxyaa6,sel=no,out=oute6);
    Mux(a=xyaa7,b=nxyaa7,sel=no,out=oute7);
    Mux(a=xyaa8,b=nxyaa8,sel=no,out=oute8);
    Mux(a=xyaa9,b=nxyaa9,sel=no,out=oute9);
    Mux(a=xyaa10,b=nxyaa10,sel=no,out=oute10);
    Mux(a=xyaa11,b=nxyaa11,sel=no,out=oute11);
    Mux(a=xyaa12,b=nxyaa12,sel=no,out=oute12);
    Mux(a=xyaa13,b=nxyaa13,sel=no,out=oute13);
    Mux(a=xyaa14,b=nxyaa14,sel=no,out=oute14);
    Mux(a=xyaa15,b=nxyaa15,sel=no,out=oute15);



    Not(in=oute0,out=nout0);
    Not(in=oute1,out=nout1);
    Not(in=oute2,out=nout2);
    Not(in=oute3,out=nout3);
    Not(in=oute4,out=nout4);
    Not(in=oute5,out=nout5);
    Not(in=oute6,out=nout6);
    Not(in=oute7,out=nout7);
    Not(in=oute8,out=nout8);
    Not(in=oute9,out=nout9);
    Not(in=oute10,out=nout10);
    Not(in=oute11,out=nout11);
    Not(in=oute12,out=nout12);
    Not(in=oute13,out=nout13);
    Not(in=oute14,out=nout14);
    Not(in=oute15,out=nout15);

    And(a=nout0,b=nout1,out=zr0);
    And(a=nout2,b=nout3,out=zr1);
    And(a=nout4,b=nout5,out=zr2);
    And(a=nout6,b=nout7,out=zr3);
    And(a=nout8,b=nout9,out=zr4);
    And(a=nout10,b=nout11,out=zr5);
    And(a=nout12,b=nout13,out=zr6);
    And(a=nout14,b=nout15,out=zr7);

    And(a=zr0,b=zr1,out=zrs0);
    And(a=zr2,b=zr3,out=zrs1);
    And(a=zr4,b=zr5,out=zrs2);
    And(a=zr6,b=zr7,out=zrs3);

    And(a=zrs0,b=zrs1,out=zrs5);
    And(a=zrs2,b=zrs3,out=zrs6);

    And(a=zrs5,b=zrs6,out=zr);

//sets the ng flag

    And(a=oute15,b=true,out=ng);

}